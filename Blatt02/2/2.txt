(2.1)
Welchen Typ haben die Variablen?
    Wird nicht angezeigt:
    (gdb) print main::i
    $1 = 5
    #i hatte den Wert 5

(2.2)
Was gibt ihr Programm aus, welchen Fehler meldet Valgrind?
    1. Keine Fehler, obwohl der Wert nicht initialisiert war. Er wird einfach als 0 gelesen,
        Glück gehabt!
    2. Wieder keine Fehler, auch auf dem invaliden Index liegt 'ne 0. Nochmal Glück gehabt!
    3.
    Array generated by another function:
    ==21103== Invalid read of size 4
    ==21103==    at 0x400585: main (valgrind-foo.c:23)
    ==21103==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
    Hier versuchen wir aus einem Array zu lesen, dass statisch von einer anderen Funktion
    generiert wurde. Jetzt haben wir kein Glück gehabt, und wir können nicht mehr daraus
    lesen.

(2.3)
1. Steps
    Es gibt 3 Step Möglichkeiten:
    Step Into: Stept eine Zeile Code weiter, oder in die erste Zeile einer Funktion,
                wenn sich ein Funktions-Aufruf findet.
    Step Over: Stept eine Zeile Code weiter, ohne in Funktionen zu steppen.
    Step Out: Führt die Funktion in der man sich befindet zu Ende aus, und stept zur
                nächsten Zeile in der übergeordneten Funktion
2. Variablen
    Durch die quadratischen Knöpfe oben kann man den entsprechenden Prozess wählen, und
    im Fenster rechts mit der Aufschrift "Local" seine Variablen ansehen.

3. Evaluate-Fenster
    Man kann Variablen in dieses Fenster drag-and-droppen, um weiter Informationen zu sehen.

4. Prozesswechsel
    Oben kann man bei "Focus on current: [...]" "Prozess" auswählen, und dann mit den
    rechteckigen Buttons einen Prozess auswählen, um nur auf diesen zu fokusieren, und evtl.
    auch nur diesen zu steppen.

5. Arrays
    Arrays werden in einer Art Baumstruktur angezeigt, sodass man alle Werte leicht erkennen
    kann.
